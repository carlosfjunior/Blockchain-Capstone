// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const verifier = artifacts.require('Verifier')

const proof = require('../../zokrates/code/square/proof')

    
contract('TestSquareVerifier', accounts => {
    const account_one = accounts[0]
    describe('verification with given proof', function () {
        beforeEach(async function () {
        this.contract = await verifier.new({ from: account_one })
    })
    
    // Test verification with correct proof
    // - use the contents from proof.json generated from zokrates steps
    it('verification should pass with correct proof', async function () {
        let verified = await this.contract.verifyTx.call(
            proof.proof.a,
            proof.proof.b,
            proof.proof.c,
            proof.inputs,
            { from: account_one }
        )
        assert.equal(verified, true, 'Verification should be pass with correct proof')
      })
  
      // Test verification with incorrect proof
      it('verification should fail with incorrect proof', async function () {
        const input = [
          '0x0000000000000000000000000000000000000000000000000000000000012345',
          '0x0000000000000000000000000000000000000000000000000000000000032100'
        ]
        let verified = await this.contract.verifyTx.call(
            proof.proof.a,
            proof.proof.b,
            proof.proof.c,
            input,
            { from: account_one }
        )
        assert.equal(verified, false, 'Verification should fail with incorrect proof')
      })
    })
  })